package kr.or.ddit.lecboard.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.exception.PKNotFoundException;
import kr.or.ddit.lecboard.dao.AttachDAO;
import kr.or.ddit.lecboard.dao.LecBoardDAO;
import kr.or.ddit.vo.AttchVO;
import kr.or.ddit.vo.ClassVO;
import kr.or.ddit.vo.LecNoticeBoardVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.UserVO;

/**강의 게시판 ServiceImpl
 * @author 황선부
 * @since 2022. 5. 13.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 5. 13.      황선부       최초작성
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Service
public class LecBoardServiceImpl implements LecBoardService {
	
	@Inject
	private LecBoardDAO boardDAO;
	@Autowired
	private AttachDAO attachDAO;
	
	@Value("#{appInfo.attatchPath}")
	private File saveFolder;
	
	@Override
	public List<Map<String, Object>> retrieveLectureListOfStu(int stuNo) {
		
		List<Map<String,Object>> result = boardDAO.selectLectureListOfStu(stuNo);
		if(result==null)
			throw new PKNotFoundException(stuNo+"에 해당하는 학번이 없습니다.");
		
		return result;
	}
	@Override
	public List<Map<String, Object>> retrieveLectureListOfPro(int userNo) {
		List<Map<String,Object>> result = boardDAO.selectLectureListOfPro(userNo);
		if(result==null)
			throw new PKNotFoundException(userNo+"에 해당하는 교수번호가 없습니다.");
		
		return result;
	}

	@Override
	public List<UserVO> retrieveLecUserList(ClassVO classVO) {
		List<UserVO> userList = boardDAO.selectLecUserList(classVO);
		return userList;
	}

	@Override
	public ServiceResult retrieveLecAuthenUser(ClassVO classVO) {
		ServiceResult sr = null;
		int count = boardDAO.selectAuthenLecUserNo(classVO);

		return count>0 ? ServiceResult.OK : ServiceResult.FAIL;	
	}

	@Override
	public void retrieveLecBoard(PagingVO<LecNoticeBoardVO> paging) {
		int totalRecord = boardDAO.selectTotalLecBoardRecord(paging);
		paging.setTotalRecord(totalRecord);
		List<LecNoticeBoardVO> dataList = boardDAO.selectLecBoard(paging);
		paging.setDataList(dataList);
	}

	@Override
	public LecNoticeBoardVO retrieveOneLecBoard(LecNoticeBoardVO lecNotice) {
		Integer lecboNo = lecNotice.getLecboNo();
		if(lecboNo==null) {
			throw new PKNotFoundException(String.format("%d 번 글이 없음.", lecNotice.getLecboNo()));
		}
		boardDAO.incrementHit(lecboNo);
		
		return boardDAO.selectOneLecBoard(lecNotice);
	}
	@Override
	public ServiceResult createlecBoard(LecNoticeBoardVO lecNotice) {
		int rowcnt = boardDAO.insertLecNoticeBoard(lecNotice);
		ServiceResult result = null;
		if(rowcnt > 0) {
			uploadAttatches(lecNotice);
		}
		return rowcnt>0?ServiceResult.OK:ServiceResult.FAIL;
		
	}
	private void uploadAttatches(LecNoticeBoardVO board) {
		List<AttchVO> attatchList = board.getAttchList();
		if(attatchList==null || attatchList.isEmpty())return;
		attachDAO.insertAttach(board);
		attatchList.forEach((attach)->{
			try {
				attach.saveTo(saveFolder);
			}catch(IOException e) {
				throw new RuntimeException(e);
			}
		});
		
	}



}
