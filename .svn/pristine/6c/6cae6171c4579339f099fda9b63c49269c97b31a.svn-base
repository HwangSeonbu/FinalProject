package kr.or.ddit.counsel.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.counsel.dao.CounselDAO;
import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.exception.PKNotFoundException;
import kr.or.ddit.vo.CounselVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProCounselVO;
import kr.or.ddit.vo.QuestionAnswerVO;
import kr.or.ddit.vo.QuestionVO;
import kr.or.ddit.vo.SCounselVO;
import lombok.extern.slf4j.Slf4j;
/**counselService 구현체
 * @author 황선부
 * @since 2022. 5. 3.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 5. 3.      황선부       최초작성
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Service
@Slf4j
public class CounselServiceImpl implements CounselService {
	@Inject
	private CounselDAO dao;
	
	@Override
	public List<SCounselVO> retreiveCounselStu(PagingVO<SCounselVO> paging) {
		//총 레코드 수
		int totalRecord = dao.stuCounselTotalRecord(paging);
		paging.setTotalRecord(totalRecord);
		List<SCounselVO> counselList = dao.studentSelectCounselList(paging);
		paging.setDataList(counselList);
		log.info("{}",counselList);
		
		return counselList;
	}

	@Override
	public List<QuestionVO> listQuestion() {
	
		List<QuestionVO> list = dao.selectQuestion();
	
		return list;
	}




	@Override
	public ServiceResult createCounsel(CounselVO counsel) {
		ServiceResult sr=null;
		//1. counsel table insert
		
		//테스트 학생번호.
		counsel.setStuNo(1);
		
		int cRowcnt = dao.insertReqCounsel(counsel);
		if(cRowcnt>0) {
			List<String> answerList = new ArrayList<>();
			answerList.add(counsel.getR1());
			answerList.add(counsel.getR2());
			answerList.add(counsel.getR3());
			answerList.add(counsel.getR4());
			answerList.add(counsel.getR5());
			answerList.add(counsel.getR6());
			answerList.add(counsel.getR7());
			answerList.add(counsel.getR8());
			answerList.add(counsel.getQaLong());
			
			//2. QA table insert(다중 문답 insert)	
			int qaRowcnt=0;
			int num=0;
			for(int i=1; i<=8; i++) {
				QuestionAnswerVO qaVO = new QuestionAnswerVO();
				String questNo = "r"+(num+1);
				String ansNo = answerList.get(i-1);
				log.info("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{}",ansNo);
				qaVO.setAnsNo(ansNo);
				qaVO.setQuestNo(questNo);
				qaRowcnt=dao.insertQA(qaVO);
				
				num++;
			}
			//장문 저장
			QuestionAnswerVO qaVO = new QuestionAnswerVO();
			String qaLong = answerList.get(8);
			qaVO.setAnsNo("LONG");
			qaVO.setQaLong(qaLong);
			qaVO.setQuestNo("r9");			
			if(dao.insertQA(qaVO)>0) {
				num++;
			}
			log.info("numnumnumnumnumnumnumnumnumnumnumnumnumnumnumnum{}",num);
			if(num==9) {
				sr= ServiceResult.OK;
			}
		}else {
			sr=ServiceResult.FAIL;
		}
		return sr;
	}

	
	@Override
	public List<ProCounselVO> retreiveCounselPro(PagingVO<ProCounselVO> paging) {
		//총 레코드 수
		int totalRecord = dao.proCounselTotalRecord(paging);
		paging.setTotalRecord(totalRecord);
		List<ProCounselVO> dataList = dao.proSelectCounselList(paging);
		
		paging.setDataList(dataList);
		
		return dataList;
	}

	@Override
	public ProCounselVO retreiveOneCounselStudent(Integer userNo) {
		
		log.info("**************************");
		ProCounselVO result = dao.selectOneCounselStudent(userNo);
		if(result==null)
			throw new PKNotFoundException(userNo+"에 해당하는 학번이 없습니다.");
		
		return result;
	}

	@Override
	public Map<String, Object> retreiveOneReqCounsel(Integer cnslId) {
		Map<String, Object> qaMap = new HashMap<>();
		List<QuestionAnswerVO>qaList = dao.selectOneReqCounsel(cnslId);
		if(qaList==null)
			throw new PKNotFoundException(cnslId+"에 해당하는 신청번호가 없습니다.");
		for(int i=0; i<=qaList.size()-1; i++) {
			//Map<-문,답
			if(qaList.get(i).getAnsNo().equals("LONG")){
				qaMap.put(qaList.get(i).getQuestNo(), qaList.get(i).getQaLong());
			}else {
				qaMap.put(qaList.get(i).getQuestNo(), qaList.get(i).getAnsNo());							
			}
		}
			
		return qaMap;
	}

	@Override
	public ServiceResult createCounselLog(CounselVO counselVO) {
		ServiceResult sr = ServiceResult.OK;
		String cnslId = counselVO.getCnslId();
		int result1 = dao.updatedyDate(counselVO);
		
		if(result1>0) {
		
			int num = 0;
	
			//L1 insert
			List<String> b1 = counselVO.getL1();
			for(String b1small : b1) {
				QuestionAnswerVO qaVO = new QuestionAnswerVO();
				qaVO.setCnslId(cnslId);
				qaVO.setQuestNo("L1");
				qaVO.setAnsNo(b1small);
				
				num += dao.insertCounselLog(qaVO);	
			}
			//L2 insert
			List<String>b2 = counselVO.getL2();
			for(String b2small : b2) {
				QuestionAnswerVO qaVO = new QuestionAnswerVO();
				qaVO.setCnslId(cnslId);
				qaVO.setQuestNo("L2");
				qaVO.setAnsNo(b2small);
				
				num += dao.insertCounselLog(qaVO);	
			}
			
			//qaLong insert
			QuestionAnswerVO qaVO = new QuestionAnswerVO();
			String qaLong = counselVO.getQaLong();
			if(qaLong==null) {
				qaLong="";
			}			
			qaVO.setQaLong(qaLong);
			if(dao.insertCounselLog(qaVO)>0) {
				num++;
			}
			//insert성공 수
			int insertSize =b1.size()+b2.size()+1;
			if(num!=insertSize) {
				sr=ServiceResult.FAIL;
			}
			
			
		}else {
			sr=ServiceResult.FAIL;
		}
		
		
		
		
		return sr;
	}



}














