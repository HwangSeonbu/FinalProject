package kr.or.ddit.vo;

import java.util.List;

import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * 페이징처리를 위한 VO
 * @author 고성식
 * @since 2022. 5. 9.
 * @version 1.0
 * @see javax.servlet.http.HttpServlet
 * <pre>
 * [[개정이력(Modification Information)]]
 * 수정일                          수정자               수정내용
 * --------     --------    ----------------------
 * 2022. 5. 9.      작성자명       최초작성
 * 2022. 5. 20.     황선부           lecId추가, setter추가
 * Copyright (c) 2022 by DDIT All right reserved
 * </pre>
 */
@Getter
@NoArgsConstructor
public class PagingVO<T> {
	
	public PagingVO(int screenSize, int blockSize) {
		super();
		this.screenSize = screenSize;
		this.blockSize = blockSize;
	}

	private int totalRecord;
	private int screenSize=10;
	private int blockSize=5;
	private int currentPage;
	
	private int totalPage;
	private int startRow;
	private int endRow;
	private int startPage;
	private int endPage;
	
	private int targetSems;
	public void setTargetSems(int targetSems) {
		this.targetSems = targetSems;
	}
	
	private String lecId;
	
	public void setLecId(String lecId) {
		this.lecId = lecId;
	}
	
	private int proNo;
	public void setProNo(int proNo) {
		this.proNo = proNo;
	}
	
	
	private int stuNo;
	
	public void setStuNo(int stuNo) {
		this.stuNo = stuNo;
	}

	
	private T detailCondition;
	public void setDetailCondition(T detailCondition) {
		this.detailCondition = detailCondition;
	}
	
	private SimpleSearchVO simpleCondition;
	public void setSimpleCondition(SimpleSearchVO simpleCondition) {
		this.simpleCondition = simpleCondition;
	}
	
	private List<T> dataList;
	
	public void setDataList(List<T> dataList) {
		this.dataList = dataList;
	}
	
	public void setTotalRecord(int totalRecord) {
		this.totalRecord = totalRecord;
		totalPage = (totalRecord+(screenSize-1)) / screenSize;
	}
	
	public void setCurrentPage(int currentPage) {
		this.currentPage = currentPage;
		
		endRow = currentPage * screenSize;
		startRow = endRow - (screenSize - 1);

		endPage = (currentPage+(blockSize-1))/blockSize * blockSize;
		startPage = endPage - (blockSize - 1);
	}
	
	private static final String PTRN = "<a href='?page=%d'>%s</a>";

	public String getPagingHTML() {
		StringBuffer html = new StringBuffer();
		if(startPage > blockSize) {
			html.append(
				String.format(PTRN, (startPage - blockSize), "이전")
			);
		}
		if(endPage>totalPage) {
			endPage = totalPage;
		}
		for(int i=startPage; i<=endPage; i++) {
			html.append(
				String.format(PTRN, i, i)	
			);
		}
		if(endPage<totalPage) {
			html.append(
				String.format(PTRN, (endPage + 1), "다음")
			);
		}
		return html.toString();
	}
	
	
	private static final String BSPTRN = "<li class='page-item %s'>"
			+ "<a class='page-link' onclick='autoScrollBlock(event)' href='#' data-page='%d'>%s</a>"
			+ "</li>";

	public String getPagingHTMLBS() {
		StringBuffer html = new StringBuffer();
		html.append("<nav aria-label='...'>");
		html.append("<ul class='pagination'>");
		String activeOrDisable = null;
		if(startPage > blockSize) {
			activeOrDisable = "";
		}else {
			activeOrDisable = "disabled";
			
		}
		html.append(
			String.format(BSPTRN, activeOrDisable, (startPage - blockSize), "이전")
		);
		if(endPage>totalPage) {
			endPage = totalPage;
		}
		for(int i=startPage; i<=endPage; i++) {
			if(i==currentPage) {
				activeOrDisable = "active";
			}else {
				activeOrDisable = "";
			}
			html.append(
				String.format(BSPTRN, activeOrDisable, i, i)	
			);
		}
		if(endPage<totalPage) {
			activeOrDisable = "";
		}else {
			activeOrDisable = "disabled";
		}
		html.append(
			String.format(BSPTRN, activeOrDisable, (endPage + 1), "다음")
		);
		html.append("</ul>");
		html.append("</nav>");
		return html.toString();
	}
}










